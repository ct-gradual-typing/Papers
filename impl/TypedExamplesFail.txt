The following are all examples that should return and error.
1.  Function and Application: 
         :t \(m:?).\(n:Nat).\(f:? -> ?).\(h:Nat -> ?).h (f m) 
            returns - Type error: ? must have the correct type with Nat
         
         :t \(m:?).\(n:Nat).\(f:? -> Nat).\(h:Nat -> ?).(f m) h 
            returns - Type error (application): types don't match Nat !~ Nat -> ?
        
2.  Succ:
         :t succ Nat
            returns - unexpected Nat : Term variables must begin with a lowercase letter.
         :t succ (succ 0,succ 0)
            returns - Type error (successor)
        
    
3.  Box: 
         :t \(m:?).\(n:Nat).\(f:? -> Nat).box<?> (f m)
            returns - Type error: You cannot box ?, you can only box terminating types
         :t \(m:?).\(n:Nat).\(f:? -> Nat).box<Nat -> Nat> (f m)
            returns - Type error: Nat must have the correct type with Nat -> Nat
         :t \(m:?).\(n:Nat).\(f:? -> ?).box<Nat> (f m)
            returns - Type error: ? must have the correct type with Nat   

4.  Unbox: 
        :t \(m:?).\(n:Nat).\(h:Nat -> ?).h (unbox<?> m) 
            returns - Type error: You cannont Unbox U
        :t \(m:?).\(n:Nat).\(f:? -> Nat).box<(Prod ? ?)> (f m) 
            returns - error: unexpected '<'
        :t \(m:?).\(n:Nat).\(f:? -> Nat).box<?> (f m) 
            returns - Type error: You cannot Box U
        

5.  Pair: 
        :t ((succ 0),) 
            returns - unexpected ","
                      expecting "(", "0", "triv", "squash", "split", "box", "unbox", letter or digit or ")"
        

6.  First:  
        :t fst(succ 0) 
            returns - Type error (first projection)

7.  Second:  
        :t snd( triv) 
            returns - Type error (second projection)

8.  Squash/Split:
        :t \(x:Nat -> ?).(squash x) 
            returns - Type error: Nat -> ? must have the correct type with ? -> ?
        :t \(x:? -> Nat).(squash x) 
            returns - Type error: ? -> Nat must have the correct type with ? -> ?
        
        
9. Miscellaneous:
        :t zero 
            returns - Type error: variable zero is free, but I can only typecheck closed terms.
        :t 7
            returns - unexpected 7 : Term variables must begin with a lowercase letter.
                      expecting letter or digit
        :t a
            returns - Type error: variable a is free, but I can only typecheck closed terms.