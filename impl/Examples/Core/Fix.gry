import Skeleton;

omega : (? -> ?) -> ?
omega = \(x : ? -> ?) -> (x (squashar x));

loop : ?
loop = omega (\(x : ?) -> (omega (splitar x)));

fix : (? -> ?) -> ?
fix = \(f : ? -> ?) -> omega (\(x:?) -> f ((splitar x) x));

fixp : forall (X <: Simple).((X -> X) -> X)
fixp = \(X <: Simple) ->
       \(f:X -> X)    ->
           unbox<X> (fix (\(y:?)->box<X> (f (unbox<X> y))));

squash-fix-nat : ((Nat -> Nat) -> (Nat -> Nat)) -> (? -> ?)
squash-fix-nat = \(f : (Nat -> Nat) -> (Nat -> Nat)) ->
                 \(y : ?) -> box (Nat -> Nat) (f (\(x:Nat) -> unbox Nat ((split (? -> ?) y) (box Nat x))));

-- fix-nat : ((Nat -> Nat) -> (Nat -> Nat)) -> (Nat -> Nat)
-- fix-nat = \(f : (Nat -> Nat) -> (Nat -> Nat)) ->
--           \(r : Nat) ->
              