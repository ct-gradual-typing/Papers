metavar termvar, x, y , z, f, r, ys ::=
metavar typevar, X, Y , Z ::=
indexvar index, i , j, k ::=

grammar
  t, c, s :: 't_' ::=                    
    | x                   ::   :: var          
    | triv                ::   :: unit         
    {{tex \mathsf{triv} }}
    | squash U            :: M :: inj          
    {{tex \mathsf{squash}_{[[U]]} }}
    | split U             :: M :: surj         
    {{tex \mathsf{split}_{[[U]]} }}    
    | box                 ::   :: gen          
    {{tex \mathsf{box} }}
    | box A               :: M :: genA
    {{tex \mathsf{box}_{[[A]]} }}        
    | unbox A             :: M :: specA         
    {{tex \mathsf{unbox}_{[[A]]} }}
    | unbox               ::   :: spec
    {{tex \mathsf{unbox} }}
    | error A             ::    :: blame
    {{tex \mathsf{error}_{[[A]]} }}
    | error               ::    :: error
    {{tex \mathsf{error} }}    
    | Lam X <: A . t      ::    :: TypeLam
    {{tex \Lambda ([[X]] <\hspace{-2px}\colon [[A]]) .[[t]] }}
    | [ A ] t             ::   :: TypeApp
    {{tex [ [[A]] ] [[t]] }}    
    | \ x : A . t         ::   :: abs          
    {{tex \lambda ([[x]] : [[A]]) . [[t]] }}
    | t1 t2               ::   :: app          
    | ( t1 , t2 )         ::   :: pair         
    | fst t               ::   :: proj1        
    | snd t               ::   :: proj2        
    | succ t              ::   :: successor    
    | 0                   ::   :: zero         
    | case t : A of t3 -> t1 , t4 -> t2 :: :: natElim
    {{tex \mathsf{case}\,[[t]] \colon [[A]]\,\mathsf{of}\,[[t3]] \to [[t1]], [[t4]] \to [[t2]] }}
    | []                  ::   :: emptylist
    | t : : t'            ::   :: cons
    {{tex [[t]] :: [[t']] }}
    | ( t )               :: S :: parens
    | [ t1 / x ] t2       :: M :: subst
    | H( t )              :: M :: hparens
    {{tex [[t]] }}
    | squash              ::    :: injU   
    {{tex \mathsf{squash} }}
    | split               ::   :: surjU
    {{tex \mathsf{split} }}    
    | [ A / X ] t         :: M :: TypeSub
    | n                   :: M :: num
    | fix t               :: M :: fix
    {{tex \mathsf{fix}\,[[t]] }}

  n, m :: 'n_' ::=
    | 0 :: :: zero
    | succ n :: :: succ

  v :: 'v_' ::=                    
    | triv                ::   :: unit         
    {{tex \mathsf{triv} }}
    | []                ::   :: Empty
    | squash S          ::   :: inj          
    {{tex \mathsf{squash}_{[[S]]} }}
    | split S           ::   :: surj         
    {{tex \mathsf{split}_{[[S]]} }}    
    | box A             ::   :: genA
    {{tex \mathsf{box}_{[[A]]} }}        
    | unbox A           ::   :: specA         
    {{tex \mathsf{unbox}_{[[A]]} }}
    | Lam X <: A . t      ::    :: TypeLam
    {{tex \Lambda ([[X]] <\hspace{-2px}\colon [[A]]) .[[t]] }}
    | \ x : A . t         ::   :: abs          
    {{tex \lambda ([[x]] : [[A]]) . [[t]] }}
    | n                   ::   :: num
    | case t : A of t3 -> t1 , t4 -> t2 :: :: natElim
    {{tex \mathsf{case}\,[[t]] \colon [[A]]\,\mathsf{of}\,[[t3]] \to [[t1]], [[t4]] \to [[t2]] }}

  Kd :: 'Kd_' ::=
    | *                   ::   :: TypeOfTypes
    {{tex \star }}

  % U ::= ? -> ? | ? x ? | List ?
  A, B, C, D, E, S, U, K :: 'A_' ::=   
    | X                   ::   :: Var
    | Top                 ::   :: Top
    {{tex \top }}
    | List A              ::   :: List
    {{tex \mathsf{List}\,[[A]] }}
    | Forall ( X <: A ) . B   ::   :: Forall
    {{tex \forall ([[X]] <\hspace{-2px}\colon [[A]]). [[B]]}}
    | SL                  ::   :: Simple
    {{tex \mathbb{S} }}
    | Unit                ::   :: term    
    {{tex \mathsf{Unit} }}
    | Nat                 ::   :: nat     
    {{tex \mathsf{Nat} }}    
    | ?                   ::   :: unitype 
    | A1 -> A2            ::   :: arrow   
    | A1 x A2             ::   :: pair    
    {{tex [[A1]] \times [[A2]] }}     
    | ( A )               :: S :: paren
    | H( A )              :: M :: hparen
    {{tex [[A]] }}
    | [ A / X ] B         :: M :: TypeSub

  G {{ tex \Gamma }} :: G_ ::=            
    | .                   ::   :: emptyCtx
    {{tex \cdot }}
    | G , X <: A           ::   :: tvn
    {{tex [[G]],[[X]] <\hspace{-2px}\colon [[A]] }}
    | G , x : A           ::   :: vn      
    | G , G'              :: M :: append  
    | ( G )               :: M :: parens

  terminals :: 'terminals_' ::=
    |  ->                 ::   :: arrow
    {{tex \rightarrow }}
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ?                   ::   :: unitype
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | box        :: :: box
    {{tex \mathsf{box} }}
    | unbox        :: :: unbox
    {{tex \mathsf{unbox} }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}                

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | x nin FV( t )       ::   :: NinFV
    {{tex [[x]] \not\in \mathsf{FV}([[t]]) }}
    | x : A elem G        ::   :: xTelemG
    | X <: A elem G        ::   :: XTelemG
    {{tex [[X]] <\hspace{-2px}\colon [[A]] \in [[G]] }}
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}    
    | t : A               :: M :: TermHasType
    | A != B              :: M :: NotEqual
    {{tex [[A]] \neq [[B]] }}
    | t ~>* t'            :: M :: Rd
    {{tex [[t]] \rightsquigarrow^* [[t']] }}
    | G <= G'             :: M :: CtxPre
    {{tex [[G]] \sqsubseteq [[G']] }}
    | t ^                :: M :: Div
    {{tex [[t]] \uparrow }}    

subrules
  v <:: t
  n <:: t
  
defns
  Typing :: '' ::=

defn
   G |- A : * :: :: kind :: 'K_'
   {{tex [[G]] \vdash [[A]] : \star }} by

   G1 |- A : *
   ----------------------- :: var
   G1, X <: A,G2 |- X : *

   ------------- :: unit
   G |- Unit : *

   ------------ :: nat
   G |- Nat : *

   ---------- :: unitype
   G |- ? : *

   G |- A : *
   --------------- :: list
   G |- List A : *

   G |- A : * && G |- B : *
   ------------------------ :: arrow
   G |- A -> B : *

   G |- A : * && G |- B : *
   ------------------------ :: prod
   G |- A x B : *

   G, X <: A |-  B : *
   -------------------------- :: forall
   G |- Forall (X <: A) . B : *

defn
    G Ok :: :: ctxOk :: 'Ok_'
    {{tex [[G]]\,\text{Ok} }} by

   ---- :: empty
   . Ok

   G Ok && G |- A : *
   ------------------ :: typeVar
   (G, X <: A) Ok

   G Ok && G |- A : *
   ------------------ :: var
   (G, x : A) Ok

defn
    G |- A <: B :: :: subtype :: 'S_'
    {{tex [[G]] \vdash [[A]] <\hspace{-2px}\colon [[B]] }} by

    G |- A : *
    ----------- :: Refl
    G |- A <: A

    G |- A : *
    ------------- :: Top
    G |- A <: Top

    X <: A elem G && G Ok
    ---------------------:: Var
    G |- X <: A
    
    G Ok
    -------------- :: NatSL
    G |- Nat <: SL

    G Ok
    --------------- :: UnitSL
    G |- Unit <: SL

    G |- A <: SL
    ----------------- :: ListSL
    G |- List A <: SL

    G |- A <: SL && G |- B <: SL
    ---------------------------- :: ArrowSL
    G |- A -> B <: SL

    G |- A <: SL && G |- B <: SL
    ---------------------------- :: ProdSL
    G |- A x B <: SL

    G |- A <: B
    --------------------- :: List
    G |- List A <: List B

    G |- A1 <: A2 && G |- B1 <: B2
    ------------------------------ :: Prod
    G |- A1 x B1 <: A2 x B2

    G |- A2 <: A1 && G |- B1 <: B2
    ------------------------------ :: Arrow
    G |- A1 -> B1 <: A2 -> B2

    G, X <: A |- B1 <: B2
    ----------------------------------------- :: Forall
    G |- Forall (X <: A).B1 <: Forall (X <: A).B2

defn
    A <= B :: :: typepre :: 'P_'
    {{tex [[A]] \sqsubseteq [[B]] }}
by

   G |- A <: SL
   ------------ :: U
   A <= ?

   ------ :: refl
   A <= A

   A <= C && B <= D
   -------------------- :: arrow
   (A -> B) <= (C -> D)

   A <= C && B <= D
   ------------------ :: prod
   (A x B) <= (C x D)

   A <= B
   ------------------------- :: list
   (List A) <= (List B)

   B1 <= B2
   ------------------------------------------- :: forall
  (Forall (X <: A).B1) <= (Forall (X <: A).B2)

defn
    G |- t <= t' :: :: termpre :: 'TP_'
    {{tex [[G]] \vdash [[t]] \sqsubseteq [[t']] }}
by

    x : A elem G && G Ok
    -------------------- :: var
    G |- x <= x

    S1 <= S2
    ------------------------- :: split
    G |- split S1 <= split S2

    S1 <= S2
    --------------------------- :: squash
    G |- squash S1 <= squash S2

    G Ok
    --------------- :: box
    G |- box <= box

    G Ok
    ------------------- :: unbox
    G |- unbox <= unbox

    G Ok
    ----------- :: nat
    G |- 0 <= 0

    G Ok
    ----------------- :: triv
    G |- triv <= triv

    G Ok
    ------------- :: empty
    G |- [] <= []

    G |- t1 <= t2
    --------------------------- :: succ
    G |- (succ t1) <= (succ t2)

    (G |- t1 <= t4 && G |- t2 <= t5) && G, x : Nat |- t3 <= t6
    -------------------------------------------------------------------------------------------- :: Nate
    G |- (case t1 : Nat of 0 -> t2, (succ x) -> t3) <= (case t4 : Nat of 0 -> t5, (succ x) -> t6)

    G |- t1 <= t3 && G |- t2 <= t4
    ------------------------------ :: pair
    G |- (t1,t2) <= (t3,t4)

    G |- t1 <= t2
    ------------------------- :: fst
    G |- (fst t1) <= (fst t2)

    G |- t1 <= t2
    ------------------------- :: snd
    G |- (snd t1) <= (snd t2)

    G |- t1 <= t3 && G |- t2 <= t4
    ------------------------------ :: cons
    G |- (t1::t2) <= (t3::t4)

    ((G |- t1 <= t4 && G |- t2 <= t5) && G, x : A2, y : List A2 |- t3 <= t6) && A1 <= A2
    ------------------------------------------------------------------------------------------------- :: Liste
    G |- (case t1 : List A1 of [] -> t2, (x::y) -> t3) <= (case t4 : List A2 of 0 -> t5, (x::y) -> t6)

    G, x : A2 |- t1 <= t2 && A1 <= A2
    --------------------------------- :: Fun
    G |- (\x:A1.t) <= (\x:A2.t2)

    G |- t1 <= t3 && G |- t2 <= t4
    ------------------------------ :: app
    G |- (t1 t2) <= (t3 t4)
    
    G |- t : ?
    --------------------- :: unboxing
    G |- (unbox A t) <= t

    G |- t : A
    ------------------- :: boxing
    G |- t <= (box A t)

    G |- t : ?
    --------------------- :: spliting
    G |- (split S t) <= t

    G |- t : S
    --------------------- :: squashing
    G |- t <= (squash S t)

    G, X <: A |- t1 <= t2
    --------------------------------------- :: tfun
    G |- (Lam X <: A.t1) <= (Lam X <: A.t2)

    G |- t1 <= t2 && A <= B
    ----------------------- :: tapp
    G |- [A]t1 <= [B]t2

    G |- t : B && A <= B    
    -------------------- :: error
    G |- error A <= t

defn
    G |- t : A :: :: type :: 'T_'
    {{tex [[G]] \vdash_{\mathsf{CG} } [[t]] : [[A]] }} by
    
    x : A elem G && G Ok
    -------------------- :: varP
    G |- x : A

    G Ok
    ------------------------------------ :: Box
    G |- box : Forall (X <: SL).(X -> ?)

    G Ok    
    -------------------------------------- :: Unbox
    G |- unbox : Forall (X <: SL).(? -> X)

    G Ok
    ---------------------- :: squash
    G |- squash S : S -> ?

    G Ok
    --------------------- :: split
    G |- split S : ? -> S

    G Ok
    ---------------- :: unitP
    G |- triv : Unit

    G Ok
    ------------- :: zeroP
    G |- 0 : Nat

    G |- t : Nat
    ----------------- :: succ
    G |- succ t : Nat    

    G |- t : Nat
    G |- t1 : A && G, x : Nat |- t2 : A
    ------------------------------------------------ :: ncase
    G |- case t : Nat of 0 -> t1, (succ x) -> t2 : A

    G Ok && G |- A : *
    -------------------------------- :: empty
    G |- [] : Forall (X <: ?).List X

    G |- t1 : A && G |- t2 : List A
    ------------------------------- :: cons
    G |- t1 :: t2 : List A

    G |- t : List A
    G |- t1 : B && G, x : A, y : List A |- t2 : B
    --------------------------------------------------- :: lcase
    G |- case t : List A of [] -> t1, (x :: y) -> t2 : B

    G |- t1 : A1 && G |- t2 : A2
    ---------------------------- :: pair
    G |- (t1,t2) : A1 x A2

    G |- t : A1 x A2
    ---------------- :: fst
    G |- fst t : A1

    G |- t : A1 x A2
    ---------------- :: snd
    G |- snd t : A2

    G, x : A |- t : B
    -------------------- :: lam
    G |- \x:A.t : A -> B

    G |- t1 : A -> B && G |- t2 : A
    ---------------------------------- :: app
    G |- t1 t2 : B

    G, X <: A |- t : B
    ------------------------------------ :: Lam
    G |- Lam X <: A. t : Forall (X <: A).B

    G |- t : Forall (X<:B).C && G |- A <: B
    --------------------------------------- :: typeApp
    G |- [A]t : [A/X]C

    G |- t : A && G |- A <: B
    ------------------------- :: Sub
    G |- t : B

   ---------------- :: error
   G |- error A : A

defns
  Reduction :: '' ::=

defn
    t1 ~> t2 :: :: red :: rd_    {{com call by name }}
by

    ---------------------------- :: retracT
    unbox A (box A t) ~> t

    A != B    
    ---------------------------- :: retracTE
    unbox A (box B t) ~> error A

    ------------------------- :: retractU
    split S (squash S t) ~> t

    S1 != S2
    ---------------------------------- :: retractUE
    split S1 (squash S2 t) ~> error S1

    t ~> t'
    ----------------- :: succ
    succ t ~> succ t'

    --------------------------------------------- :: ncase0
    case 0 : Nat of 0 -> t1, (succ x) -> t2 ~> t1

    --------------------------------------------------------- :: ncaseSucc
    case (succ t) : Nat of 0 -> t1, (succ x) -> t2 ~> [t/x]t2

    t ~> t'
    ----------------------------------------------------------------------------------- :: ncase
    case t : Nat of 0 -> t1, (succ x) -> t2 ~> case t' : Nat of 0 -> t1, (succ x) -> t2

    -------------------------------------------------- :: lcaseEmpty
    case [] : List A of [] -> t1, (x :: y) -> t2 ~> t1

    ---------------------------------------------------------------------- :: lcaseCons
    case (t1 :: t2) : List A of [] -> t3, (x :: y) -> t4 ~> [t1/x][t2/y]t4

    t1 ~> t'1
    --------------------- :: head
    t1 :: t2 ~> t'1 :: t2

    t2 ~> t'2
    --------------------- :: tail
    t1 :: t2 ~> t1 :: t'2

    t ~> t'
    ------------------------------------------------------------------------------------------ :: lcase
    case t : List A of [] -> t1, (x :: y) -> t2 ~> case t' : List A of [] -> t1, (x :: y) -> t2

    ------------------------- :: beta
    (\x:A1.t2) t1 ~> [t1/x]t2
    
    ------------------ :: proj1
    fst (t1, t2) ~> t1

    ------------------ :: proj2
    snd (t1, t2) ~> t2
    
    t1 ~> t'1
    --------------- :: app
    t1 t2 ~> t'1 t2

    t2 ~> t'2
    --------------- :: app2
    v t2 ~> v t'2

    t ~> t'
    ----------------------- :: split
    split S t ~> split S t'

    t ~> t'
    ----------------------- :: unbox
    unbox A t ~> unbox A t'

    t ~> t'
    --------------- :: fst
    fst t ~> fst t'

    t ~> t'
    --------------- :: snd
    snd t ~> snd t'

    t1 ~> t'1
    ------------------- :: pair1
    (t1,t2) ~> (t'1,t2)

    t2  ~> t'2
    ------------------- :: pair2
    (t1,t2) ~> (t1,t'2)

    ----------------------------- :: typeBeta
    [A](Lam X <: B . t) ~> [A/X]t

    t1 ~> t2
    -------------- :: typeApp
    [A]t1 ~> [A]t2