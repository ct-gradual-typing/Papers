% This is the full Ott spec of Seik et al.'s Simply Typed Gradual
% lambda-Calculus found in Seik:2015.

% embed {{ tex-preamble
% \usepackage{txfonts}
% }}

metavar termvar, x, y , z, f ::=
metavar typevar, X, Y , Z ::=
indexvar index, i , j, k ::=

grammar
  t, c, v, s, n :: 't_' ::=                    
    | x                   ::   :: var          
    | triv                ::   :: unit         
    {{tex \mathsf{triv} }}
    | t : ctag            ::   :: cast         
    {{tex [[t]] : [[ctag]] }}    
    | \ x : A . t         ::   :: abs          
    {{tex \lambda [[x]] : [[A]] . [[t]] }}
    | t1 t2               ::   :: app          
    | ( t1 , t2 )         ::   :: pair         
    | fst t               ::   :: proj1        
    | snd t               ::   :: proj2        
    | succ t              ::   :: successor    
    | 0                   ::   :: zero         
    | ( t )               :: S :: parens
    | [ t1 / x ] t2       :: M :: subst
    | H( t )              :: M :: hparens
    {{tex [[t]] }}
    | [| t |]             :: M :: Interp
    {{tex \interp{[[t]]} }}    
    
  T :: 'T_' ::=                                
    | Unit                ::   :: unit         
    {{tex \mathsf{Unit} }}
    | Nat                 ::   :: nat          

  R :: 'R_' ::=                                
    | Unit                ::   :: unit         
    {{tex \mathsf{Unit} }}
    | Nat                 ::   :: nat          
    | ? -> ?              ::   :: retract
    {{tex ? \to ? }}
    
 ctag :: 'ct_' ::=
    | { A } :: :: Type
    {{tex [[A]] }}
    | ctag => ctag' :: :: cast
    {{tex [[ctag]] \Rightarrow [[ctag']] }}
    | h( ctag ) :: :: hparens
    {{tex [[ctag]] }}

  % (Siek) T is an atomic type
  % (Siek) R is either T or ? -> ?
  A, B, C, D, E, S, U :: 'A_' ::=              
    | Unit                ::   :: term         
    {{tex \mathsf{Unit} }}
    | Nat                 ::   :: nat          
    {{tex \mathsf{Nat} }}    
    | ?                   ::   :: unitype      
    | A1 -> A2            ::   :: arrow        
    | A1 x A2             ::   :: pair         
    {{tex [[A1]] \times [[A2]] }}     
    | ( A )               :: S :: paren
    | H( A )              :: M :: hparen
    {{tex [[A]] }}
    | ? -> ?              :: M :: retract
    {{tex ? \to ? }}    
    | A1 --> A2           :: M :: Morph
    {{tex [[A1]] \mto [[A2]] }}
    | [| G |]             :: M :: InterpCtx
    {{tex \interp{[[G]]} }}
    | [| A |]             :: M :: InterpType
    {{tex \interp{[[A]]} }}    

  G {{ tex \Gamma }} :: G_ ::=                 
    | .                   ::   :: emptyCtx     
    {{tex \cdot }}
    | G , x : A           ::   :: vn           
    | G , G'              :: M :: append       
    | ( G )               :: M :: parens

  terminals :: 'terminals_' ::=
    |  ->                 ::   :: arrow
    {{tex \rightarrow }}
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ?                   ::   :: unitype
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}                

  vd :: 'vd_' ::=
    | |- :: :: vdash
    | |~ :: :: ndash

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | ~ formula           ::   :: notj
    {{tex \lnot [[formula]] }}
    | x : A elem G        ::   :: xTelemG
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | not formula         ::   :: not
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}
    | x nin FV ( t )      :: M :: FV
    {{tex [[x]] \not\in \mathsf{FV}([[t]]) }}
    | t != t'             :: M :: NeqT
    {{tex [[t]] \neq [[t']] }}
    | t : A               :: M :: TermHasType
    | A1 != A2            :: M :: TypeNEq
    {{tex [[A1]] \neq [[A2]] }}
    | nat( A ) = B        :: M :: natFun
    {{tex \mathsf{nat}([[A]]) = [[B]] }}
    | fun( A ) = B        :: M :: funFun
    {{tex \mathsf{fun}([[A]]) = [[B]] }}
    | prod( A ) = B       :: M :: prodFun
    {{tex \mathsf{prod}([[A]]) = [[B]] }}    

subrules
  T <:: A
  T <:: R
  R <:: A
  
defns
  Typing :: '' ::=

defn
    A ~ B :: :: typeConsis :: ''    
    {{tex [[A]] \sim [[B]] }} by

    ----- :: refl
    A ~ A

    ----- :: box
    A ~ ?

    ----- :: unbox
    ? ~ A

    A1 ~ A2 && B1 ~ B2
    ------------------- :: arrow
    A1 -> B1 ~ A2 -> B2

    A1 ~ A2 && B1 ~ B2
    ------------------- :: prod
    A1 x B1 ~ A2 x B2
    
defn
    G |-S t : A :: :: stype :: 'S_' 
    {{tex [[G]] \vdash_{\mathsf{S} } [[t]] : [[A]] }} by

    x : A elem G
    ------------ :: var
    G |-S x : A

    ---------------- :: unit
    G |-S triv : Unit

    ------------- :: zero
    G |-S 0 : Nat
    
    G |-S t : A && nat(A) = Nat
    -------------------------- :: succ
    G |-S succ t : Nat

    G |-S t1 : A1 && G |-S t2 : A2
    ---------------------------- :: pair
    G |-S (t1,t2) : A1 x A2

    (G |-S t : B && prod(B) = A1 x A2)
    --------------------------------- :: fst
    G |-S fst t : A1

    (G |-S t : B && prod(B) = A1 x A2)
    -------------------------------- :: snd
    G |-S snd t : A2

    G, x : A |-S t : B
    --------------------- :: lam
    G |-S \x:A1.t : A -> B

    G |-S t1 : C 
    (G |-S t2 : A2 && A2 ~ A1) && fun(C) = A1 -> B1
    ----------------------------------------------- :: app
    G |-S t1 t2 : B1

defn
    G |-C t : A :: :: ctype :: 'C_' 
    {{tex [[G]] \vdash_{\mathsf{C} } [[t]] : [[A]] }} by
    
    x : A elem G
    ------------ :: var
    G |-C x : A

    ---------------- :: unit
    G |-C triv : Unit

    ------------- :: zero
    G |-C 0 : Nat

    G |-C t : Nat
    ----------------- :: succ
    G |-C succ t : Nat

    G |-C t1 : A1 && G |-C t2 : A2
    ---------------------------- :: pair
    G |-C (t1,t2) : A1 x A2

    G |-C t : A1 x A2
    ---------------- :: fst
    G |-C fst t : A1

    G |-C t : A1 x A2
    ---------------- :: snd
    G |-C snd t : A2

    G, x : A |-C t : B
    --------------------- :: lam
    G |-C \x:A1.t : A -> B

    G |-C t1 : A -> B && G |-C t2 : A
    ---------------------------------- :: app
    G |-C t1 t2 : B

    G |-C t : A && A ~ B
    ------------------------- :: cast
    G |-C (t : {A} => {B}) : B

defns
  Reduction :: '' ::=

defn
    G |- t1 ~> t2 : A :: :: redA :: rdA_
by

    G |-C v : A
    --------------- :: values
    G |- v ~> v : A

    % Casting:

    G |-C v : T
    ---------------------------- :: castId
    G |- v : {T} => {T} ~> v : T

    G |-C v : ?
    ---------------------------- :: castU
    G |- v : {?} => {?} ~> v : ?

    G |-C v : R
    -------------------------------------- :: succeed
    G |- v : h({R} => {?}) => {R} ~> v : R

    G |-C v1 : A1 -> B1 && G |-C v2 : A2
    --------------------------------------------------------------------------------------------- :: castArrow
    G |- H((v1 : {(A1 -> B1)} => {(A2 -> B2)}) v2) ~> H(H(v1 (v2 : {A2} => {A1})) : {B1} => {B2}) : B

    ((G |-C v : A && A ~ T) && T != R) && T != ?
    --------------------------------------------------- :: castGround
    G |- v : {A} => {?} ~> v : h({A} => {T}) => {?} : ?

    ((G |-C v : ? && A ~ T) && T != R) && T != ?
    --------------------------------------------------- :: castExpand
    G |- v : {?} => {A} ~> v : h({?} => {T}) => {A} : A

    % Functions:

    G, x : A1 |-C t : A2 && G |-C v : A1    
    ------------------------------------ :: beta
    G |- (\x:A1.t) v ~> [v/x]t : A2

    G |- t1 ~> t'1 : A1 -> A2 && G |-C t2 : A1
    ----------------------------------------- :: app1
    G |- t1 t2 ~> t'1 t2 : A2

    G |-C v : A1 -> A2 && G |- t ~> t' : A1
    -------------------------------------- :: app2
    G |- v t ~> v t' : A2

    % Pairs:
    
    G |- t ~> t' : A1 x A2
    ------------------------- :: fst
    G |- fst t ~> fst t' : A1

    G |- t ~> t' : A1 x A2
    ------------------------- :: snd
    G |- snd t ~> snd t' : A2
    
    G |- t1 ~> t'1 : A1 && G |-C t2 : A2
    ----------------------------------- :: pair1
    G |- (t1,t2) ~> (t'1,t2) : A1 x A2

    G |-C t1 : A1 && G |- t2  ~> t'2 : A2
    ------------------------------------ :: pair2
    G |- (t1,t2) ~> (t1,t'2) : A1 x A2

defn
    G |- t1 => t2 : A :: :: castIn :: ci_ 
    {{tex [[G]] \vdash [[t1]] \boxdotRight [[t2]] : [[A]] }}
by

    x : A elem G
    --------------- :: var
    G |- x => x : A

    --------------- :: zero
    G |- 0 => 0 : A

    ------------------------ :: triv
    G |- triv => triv : Unit

    G |- t1 => t2 : ?
    ------------------------------------ :: succOne
    G |- succ t1 => succ (t2 : {?} => {Nat}) : Nat

    G |- t1 => t2 : Nat
    ----------------------------- :: succTwo
    G |- succ t1 => succ t2 : Nat

    G |- t1 => t3 : A1 && G |- t2 => t4 : A2
    ---------------------------------------- :: pair
    G |- (t1,t2) => (t3,t4) : A1 x A2

    G |- t1 => t2 : ?
    ---------------------------------------------- :: fstOne
    G |- fst t1 => fst (t2 : {?} => {(? x ?)}) : ?

    G |- t1 => t2 : A x B
    ---------------------------------------------- :: fstTwo
    G |- fst t1 => fst t2 : A

    G |- t1 => t2 : ?
    ---------------------------------------------- :: sndOne
    G |- snd t1 => snd (t2 : {?} => {(? x ?)}) : ?

    G |- t1 => t2 : A x B
    ------------------------- :: sndTwo
    G |- snd t1 => snd t2 : B

    G, x : A1 |- t1 => t2 : A2
    ------------------------------------ :: lam
    G |- \x:A1.t1 => \x:A1.t2 : A1 -> A2

    G |- t1 => t3 : ? && G |- t2 => t4 : A
    --------------------------------------------- :: app1
    G |- t1 t2 => (t3 : {?} => {(A -> ?)}) t4 : ?

    G |- t1 => t3 : A1 -> B 
    (G |-t2 => t4 : A2 && A1 ~ A2) && A1 != A2
    ------------------------------------------ :: app2
    G |- t1 t2 => t3 (t4 : {A2} => {A1}) : B

    G |- t1 => t3 : A1 -> A2 && G |- t2 => t4 : A1
    ---------------------------------------------- :: app3
    G |- t1 t2  => t3 t4 : A2