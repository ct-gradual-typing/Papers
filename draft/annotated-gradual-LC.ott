metavar termvar, x, z ::=

indexvar index, k ::=

grammar
  t :: 't_' ::=                                {{ com term }}
    | x                   ::   :: var          {{ com variable }}
    | triv                ::   :: unit         {{ com unit }}
    | < A > t             ::   :: cast         {{ com type cast }}
    {{tex \langle [[A]] \rangle [[t]] }}
    | \ x : A . t         ::   :: abs          {{ com $\lambda$-abstraction }}
    {{tex \lambda [[x]] : [[A]] . [[t]] }}
    | t1 t2               ::   :: app          {{ com function application }}
    | ( t1 , t2 )         ::   :: pair         {{ com pair constructor }}
    | fst t               ::   :: proj1        {{ com first projection }}
    | snd t               ::   :: proj2        {{ com second projection }}
    | succ t              ::   :: successor    {{ com successor function }}
    | 0                   ::   :: zero         {{ com zero }}
    | ( t )               :: S :: parens
    | [ t1 / x ] t2       :: M :: subst
    | wrong               :: M :: wrong
    {{tex \mathsf{wrong} }}
    | H( t )              :: M :: hparens
    {{tex [[t]] }}

  A, B, C :: 'A_' ::=                           {{ com type }}  
    | Unit                ::   :: term         {{ com unit type }}
    | Nat                 ::   :: nat          {{ com natural number type }}
    | ?                   ::   :: unitype      {{ com untyped universe }}
    | A1 -> A2            ::   :: arrow        {{ com function type }}
    | A1 x A2             ::   :: pair         {{ com cartesian product type }}
    {{tex [[A1]] \times [[A2]] }}     
    | ( A )               :: S :: paren
    | TypeError           :: M :: typeError
    {{tex \mathsf{TypeError} }}

  G {{ tex \Gamma }} :: G_ ::=                 {{ com typing context }}
    | .                   ::   :: em           {{ com empty context }}
    | x : A               ::   :: vn           {{ com cons }}
    | G , G'              :: M :: append       {{ com append }}

  terminals :: 'terminals_' ::=
    |  ->                 ::   :: arrow
    {{tex \rightarrow }}
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | Unit                ::   :: unit
      {{tex 1 }}
    | Nat                 ::   :: nat
    {{tex \mathbb{N} }}
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ?                   ::   :: unitype
    | .                   ::   :: emptyCtx    
    {{tex \cdot }}
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | triv                ::   :: triv
    {{tex \mathsf{triv} }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}                

  vd :: 'vd_' ::=
    | |- :: :: vdash
    | |~ :: :: ndash

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | ~ formula           ::   :: notj
    {{tex \lnot [[formula]] }}
    | x : A elem G        ::   :: xTelemG
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | not formula         ::   :: not
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}
    | x nin FV ( t )      :: M :: FV
    {{tex [[x]] \not\in \mathsf{FV}([[t]]) }}
    | t != t'             :: M :: NeqT
    {{tex [[t]] \neq [[t']] }}

defns
  Typing :: '' ::=

defn
    A ~ B :: :: typeConsis :: ''    {{ com [[A]] is consistent with [[B]] }}
    {{tex [[A]] \sim [[B]] }} by

    ----- :: refl
    A ~ A

    ----- :: box
    A ~ ?

    ----- :: unbox
    ? ~ A

    A1 ~ A2 && B1 ~ B2
    ------------------- :: arrow
    A1 -> B1 ~ A2 -> B2

    A1 ~ A2 && B1 ~ B2
    ------------------- :: prod
    A1 x B1 ~ A2 x B2

defn
    G vd t : A :: :: type :: ''    {{ com [[t]] has type [[A]] in context [[G]] }}
    {{tex [[G]] [[vd]] [[t]] : [[A]] }} by
    

    x : A elem G
    ------------ :: var
    G |- x : A

    ---------------- :: unit
    G |- triv : Unit

    ------------- :: zero
    G |- 0 : Nat

    G |- t : Nat
    ----------------- :: succ
    G |- succ t : Nat

    G |- t1 : A1 && G |- t2 : A2
    ---------------------------- :: pair
    G |- (t1,t2) : A1 x A2

    G |- t : A1 x A2
    ---------------- :: fst
    G |- fst t : A1

    G |- t : A1 x A2
    ---------------- :: snd
    G |- snd t : A2

    G, x : A1 |- t : A2
    ----------------------- :: lam
    G |- \x:A1.t : A1 -> A2

    G |- t1 : A1 -> A2 && G |- t2 : A1
    ---------------------------------- :: app
    G |- t1 t2 : A2

    G |- t : A && A ~ B
    ------------------- :: cast
    G |- < B > t : B