import Skeleton;

true : ? -> ? -> ?
true = \(p:?)->\(q:?)->p;

false : ? -> ? -> ?
false = \(p:?)->\(q:?)->q;

pair : ? -> ? -> (? -> ? -> ?) -> ?
pair = \(x:?)->\(y:?)->\(z:? -> ? -> ?)->(z x y);

first : ((? -> ? -> ?) -> ?) -> ?
first = \(p : (? -> ? -> ?) -> ?)->p true;

second : ((? -> ? -> ?) -> ?) -> ?
second = \(p:(? -> ? -> ?) -> ?)->p false;

cons : ? -> ? -> (? -> ? -> ?) -> ?
cons = pair;

head : ((? -> ? -> ?) -> ?) -> ?
head = first;

tail : ((? -> ? -> ?) -> ?) -> ?
tail = \(p:(? -> ? -> ?) -> ?)->p false;

nil : ? -> ? -> ?
nil = \(p:?)->\(q:?)->q;

list : ? -> ? -> (? -> ? -> ?) -> ?
list = \(m:?)->\(n:?)->cons m n;

list4 : ? -> ? -> ? -> ? -> (? -> ? -> ?) -> (? -> ? -> ?) -> (? -> ? -> ?) -> ?
list4 = \(r:?)->\(s:?)->\(t:?)->\(u:?)->\(elem1:? -> ? -> ?)->\(elem2:? -> ? -> ?)->\(elem3:? -> ? -> ?)->(list (list r s elem1) (list t u elem2) elem3); 

zero : (? -> ?) -> ? -> ?
zero = \(s:? -> ?)->\(z:?)-> z;

one : (? -> ?) -> ? -> ?
one = \(s:? -> ?)->\(z:?)->s z;

two : (? -> ?) -> ? -> ?
two = \(s:? -> ?) -> \(z:?) -> s (s z);

three : (? -> ?) -> ? -> ?
three = \(s:? -> ?) -> \(z:?) -> s (s (s z));

four : (? -> ?) -> ? -> ?
four = \(s:? -> ?) -> \(z:?) -> s (s (s (s z)));

five : (? -> ?) -> ? -> ?
five = \(s:? -> ?) -> \(z:?) -> s (s (s (s (s z))));

six : (? -> ?) -> ? -> ?
six = \(s:? -> ?) -> \(z:?) -> s (s (s (s (s (s z)))));

seven : (? -> ?) -> ? -> ?
seven = \(s:? -> ?) -> \(z:?) -> s (s (s (s (s (s (s z))))));

eight : (? -> ?) -> ? -> ?
eight = \(s:? -> ?) -> \(z:?) -> s (s (s (s (s (s (s (s z)))))));

nine : (? -> ?) -> ? -> ?
nine = \(s:? -> ?) -> \(z:?) -> s (s (s (s (s (s (s (s (s z))))))));

ten : (? -> ?) -> ? -> ?
ten = \(s:? -> ?) -> \(z:?) -> s (s (s (s (s (s (s (s (s (s z)))))))));

suc : ((? -> ?) -> ? -> ?) -> (? -> ?) -> ? -> ?
suc = \(m:(? -> ?) -> ? -> ?) -> \(f:? -> ?) -> \(x:?) -> f (m f x);

add : ((? -> ?) -> ? -> ?) -> ((? -> ?) -> ? -> ?) -> (? -> ?) -> ? -> ?
add = \(m:(? -> ?) -> ? -> ?) -> \(n:(? -> ?) -> ? -> ?)->\(f:? -> ?)->\(x:?)-> m f (n f x);

multiply : ((? -> ?) -> ? -> ?) -> ((? -> ?) -> ? -> ?) -> (? -> ?) -> ? -> ?
multiply =  \(m:(? -> ?) -> ? -> ?) -> \(n:(? -> ?) -> ? -> ?)-> \(f:? -> ?) -> m (n f);

squash_num : ((? -> ?) -> ? -> ?) -> (? -> ?)
squash_num = \(x : (? -> ?) -> ? -> ?) -> \(y:?)-> squash<? -> ?> (\(z:?) -> x (split<? -> ?> y) z);

exp : ((? -> ?) -> ? -> ?) -> ((? -> ?) -> ? -> ?) -> (? -> ?) -> ? -> ?
exp = \(m:(? -> ?) -> ? -> ?) -> \(n:(? -> ?) -> ? -> ?) -> \(s:? -> ?) -> \(z:?) -> (split<? -> ?> (n (squash_num m) (squash<? -> ?> s))) z;
