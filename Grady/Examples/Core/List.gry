import Naturals;

tail : forall (X<:?).([X] -> [X])
tail = \(X<:?) -> \(l:[X]) ->
             case l of [] -> [X][], (h :: t) -> t;

append : forall (A <: Simple).([A] -> [A] -> [A])
append = \(A <: Simple) ->
           ([[A] -> [A] -> [A]]fixp)
             (\(r : [A] -> [A] -> [A]) -> \(l1 : [A]) -> \(l2 : [A]) ->
               case l1 of
                 [] -> l2,
                 (a :: as) -> a :: (r as l2));

length : forall (A <: Simple).([A] -> Nat)
length = \(A <: Simple) -> 
           ([[A] -> Nat]fixp)
             (\(r : [A] -> Nat) -> \(l : [A]) ->
               case l of
                 [] -> 0,
                 (a :: as) -> succ (r as));

map : forall (A <: Simple).(forall (B <: Simple).((A -> B) -> ([A] -> [B])))
map = \(A <: Simple) -> \(B <: Simple) -> \(f : A -> B) ->
        ([[A] -> [B]]fixp)
           (\(r : [A] -> [B]) -> \(l : [A]) ->
                   case l of
                     [] -> [B][],
                     (x :: xs) -> (f x) :: (r xs));

foldr : forall (A <: Simple).(forall (B <: Simple).((A -> B -> B) -> B -> ([A] -> B)))
foldr = \(A <: Simple) -> \(B <: Simple) -> \(f : A -> B -> B) -> \(b : B) ->
          ([[A] -> B]fixp)
            (\(r : [A] -> B) -> \(l : [A]) ->
                   case l of
                     [] -> b,
                     (a :: as) -> (f a (r as)));

foldl : forall (A <: Simple).(forall (B <: Simple).((B -> A -> B) -> (B -> [A] -> B)))
foldl = \(A <: Simple) -> \(B <: Simple) -> \(f : B -> A -> B) ->
          ([B -> [A] -> B]fixp)
            (\(r : B -> [A] -> B) -> \(b : B) -> \(l : [A]) ->
                   case l of
                     [] -> b,
                     (a :: as) -> r (f b a) as);

reverse : forall (A <: Simple).([A] -> [A])
reverse = \(A <: Simple) -> \(l : [A]) -> ([[A]][A]foldl) (\(acc:[A]) -> \(x:A) -> x :: acc) [] l;

zipWith : forall (A <: Simple).(forall (B <: Simple).(forall (C <: Simple).((A -> B -> C) -> ([A] -> [B] -> [C]))))
zipWith = \(A <: Simple) -> \(B <: Simple) -> \(C <: Simple) -> \(f : A -> B -> C) ->
            ([[A] -> [B] -> [C]]fixp)
              (\(r : [A] -> [B] -> [C]) -> \(l1 : [A]) -> \(l2 : [B]) ->
                 case l1 of
                   [] -> [C][],
                   (a :: as) -> case l2 of
                                  [] -> [C][],
                                  (b :: bs) -> (f a b) :: (r as bs));

zip : forall (A <: Simple).(forall (B <: Simple).([A] -> [B] -> [(A,B)]))
zip = \(A <: Simple) -> \(B <: Simple) -> \(l1 : [A]) -> \(l2 : [B]) ->
        ([(A,B)][B][A]zipWith) (\(x : A) -> \(y : B) -> (x,y)) l1 l2;
