% The full Ott spec of Simply Typed Grady.

metavar termvar, x, y , z, f ::=
metavar typevar, X, Y , Z ::=
indexvar index, i , j, k ::=

grammar
  t, c, s :: 't_' ::=                    
    | x                   ::   :: var          
    | triv                ::   :: unit         
    {{tex \mathsf{triv} }}
    | squash U            ::   :: inj          
    {{tex \mathsf{squash}_{[[U]]} }}
    | split U             ::   :: surj         
    {{tex \mathsf{split}_{[[U]]} }}
    | Squash S            ::   :: injG
    {{tex \mathsf{Squash}_{[[S]]} }}
    | Split S             ::   :: surjG         
    {{tex \mathsf{Split}_{[[S]]} }}        
    | box C               ::   :: gen          
    {{tex \mathsf{box}_{[[C]]} }}    
    | unbox C             ::   :: spec         
    {{tex \mathsf{unbox}_{[[C]]} }}
    | lbox C               :: M  :: lgen
    {{tex \widehat{\mathsf{box} }_{[[C]]} }}    
    | lunbox C             :: M  :: lspec
    {{tex \widehat{\mathsf{unbox} }_{[[C]]} }}    
    | Box C               :: M  :: lGen
    {{tex \mathsf{Box}_{[[C]]} }}    
    | Unbox C             :: M  :: lSpec
    {{tex \mathsf{Unbox}_{[[C]]} }}
    | t1 ; t2             :: M :: Comp
    | t1 -> t2            :: M :: Arrow
    | t1 XX t2            :: M :: Prod
    {{tex [[t1]] \times [[t2]] }}
    | lsplit S            :: M  :: lsplit
    {{tex \widehat{\mathsf{split} }_{[[S]]} }}    
    | lsquash S           :: M  :: lsquash
    {{tex \widehat{\mathsf{squash} }_{[[S]]} }}        
    | \ x : A . t         ::   :: abs          
    {{tex \lambda [[x]] : [[A]] . [[t]] }}
    | t1 t2               ::   :: app          
    | ( t1 , t2 )         ::   :: pair         
    | fst t               ::   :: proj1        
    | snd t               ::   :: proj2        
    | succ t              ::   :: successor    
    | 0                   ::   :: zero         
    | case t of 0 -> t1 , ( succ x ) -> t2 :: :: natElim
    {{tex \mathsf{case}\,[[t]]\,\mathsf{of}\,0 \to [[t1]], (\mathsf{succ}\,[[x]]) \to [[t2]] }}
    | ( t )               :: S :: parens
    | [ t1 / x ] t2       :: M :: subst
    | H( t )              :: M :: hparens
    {{tex [[t]] }}
    | squash              :: M  :: injU   
    {{tex \mathsf{squash} }}
    | split               :: M  :: surjU
    {{tex \mathsf{split} }}
    | 42                  :: M :: Forty2
    | 3                   :: M :: Three
    | [| t |]             :: M :: Interp
    {{tex \interp{[[t]]} }}
    | n                   :: M :: nat

  n :: 'n_' ::=
    | 0        :: :: zero
    | succ n   :: :: nat
    
  v :: 'v_' ::=
    | triv         ::   :: triv
    | \ x : A . t  ::   :: abs
    | n            ::   :: nat
    | split U  :: :: split
    | squash U :: :: squash
    | box C    :: :: box
    | unbox C  :: :: unbox    

  % S :: 'S_' ::=
  %   | ?             ::   :: U
  %   {{tex \mathsf{?} }}    
  %   | S1 -> S2      ::   :: arrow
  %   | S1 x S2       ::   :: prod
  %   | ( S )         ::   :: Paren
  %   | skeleton A    ::   :: Skel

  % U :: 'U_' ::=
  %   | ? -> ?        ::   :: arrowU
  %   | ? x ?         ::   :: prodU
  %   | ( U )         ::   :: Paren

  T :: 'T_' ::=                                
    | Unit                ::   :: term         
    | Nat                 ::   :: nat          
    
  A, B, C, D, E, R, X, Y, U, S :: 'A_' ::=           
    | Unit                ::   :: term         
    {{tex \mathsf{Unit} }}
    | 1                   :: M :: terminal
    {{tex 1}}
    | Nat                 ::   :: nat          
    {{tex \mathsf{Nat} }}    
    | ?                   ::   :: unitype
    {{tex \mathsf{?} }}
    | A1 -> A2            ::   :: arrow        
    | A1 x A2             ::   :: pair         
    {{tex [[A1]] \times [[A2]] }}     
    | ( A )               :: S :: paren
    | H( A )              :: M :: hparen
    {{tex [[A]] }}
    | A1 --> A2           :: M :: Morph
    {{tex [[A1]] \mto [[A2]] }}
    | [| G |]             :: M :: InterpCtx
    {{tex \interp{[[G]]} }}
    | [| A |]             :: M :: InterpType
    {{tex \interp{[[A]]} }}
    | skeleton A          :: M :: Skeleton
    {{tex \mathsf{skeleton}\,[[A]] }}


  G {{ tex \Gamma }} :: G_ ::=                 
    | .                   ::   :: emptyCtx     
    {{tex \cdot }}
    | G , x : A           ::   :: vn           
    | G , G'              :: M :: append       
    | ( G )               :: M :: parens

  terminals :: 'terminals_' ::=
    |  ->                 ::   :: arrow
    {{tex \rightarrow }}
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | box        :: :: box
    {{tex \mathsf{box} }}
    | unbox        :: :: unbox
    {{tex \mathsf{unbox} }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}                

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | ~ formula           ::   :: notj
    {{tex \lnot [[formula]] }}
    | x : A elem G        ::   :: xTelemG
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | not formula         ::   :: not
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}
    | x nin FV ( t )      :: M :: FV
    {{tex [[x]] \not\in \mathsf{FV}([[t]]) }}
    | t != t'             :: M :: NeqT
    {{tex [[t]] \neq [[t']] }}
    | t : A               :: M :: TermHasType
    | A1 != A2            :: M :: TypeNEq
    {{tex [[A1]] \neq [[A2]] }}
    | nat( A ) = B        :: M :: natFun
    {{tex \mathsf{nat}([[A]]) = [[B]] }}
    | fun( A ) = B        :: M :: funFun
    {{tex \mathsf{fun}([[A]]) = [[B]] }}
    | prod( A ) = B       :: M :: prodFun
    {{tex \mathsf{prod}([[A]]) = [[B]] }}
    | G |- t1 ~>* t2 : A  :: M :: Trans
    {{tex [[G]] \vdash [[t1]] \rightsquigarrow^* [[t2]] : [[A]] }}
    | [| G |- t : A |]    :: M :: interpJdg
    {{tex \interp{[[G]] \vdash [[t]] : [[A]]} }}

subrules
  T <:: A
  n <:: t
  v <:: t
  
defns
  Typing :: '' ::=

defn
    G |- t : A :: :: type :: ''    
    {{tex [[G]] \vdash [[t]] : [[A]] }} by
    

    x : A elem G
    ------------ :: var
    G |- x : A

    ------------------- :: Box
    G |- box T : T -> ?

    --------------------- :: Unbox
    G |- unbox T : ? -> T

    ------------------- :: BoxG
    G |- Box A : A -> ?

    --------------------- :: UnboxG
    G |- Unbox A : ? -> A

    ---------------------- :: squash
    G |- squash U : U -> ?

    --------------------- :: split
    G |- split U : ? -> U

    --------------------- :: SplitG
    G |- Split S : S -> ?

    ---------------------- :: SquashG
    G |- Squash S : ? -> S

    ---------------- :: unit
    G |- triv : Unit

    ------------- :: zero
    G |- 0 : Nat

    G |- t : Nat
    ----------------- :: succ
    G |- succ t : Nat

    G |- t : Nat
    G |- t1 : A && G, x : Nat |- t2 : A
    ------------------------------------------ :: case
    G |- case t of 0 -> t1, (succ x) -> t2 : A

    G |- t1 : A1 && G |- t2 : A2
    ---------------------------- :: pair
    G |- (t1,t2) : A1 x A2

    G |- t : A1 x A2
    ---------------- :: fst
    G |- fst t : A1

    G |- t : A1 x A2
    ---------------- :: snd
    G |- snd t : A2

    G, x : A |- t : B
    --------------------- :: lam
    G |- \x:A1.t : A -> B

    G |- t1 : A -> B && G |- t2 : A
    ---------------------------------- :: app
    G |- t1 t2 : B

defns
  Reduction :: '' ::=

defn
    G |- t1 ~> t2  : A :: :: red :: rd_ 
by


    x : A elem G
    --------------- :: var
    G |- x ~> x : A

    G |- t : T
    ------------------------------- :: retracT
    G |- unbox T (box T t) ~> t : T

    G |- t1 ~> t2 : T
    --------------------------------- :: unbox
    G |- unbox T t1 ~> unbox T t2 : T

    G |- t : A
    ------------------------------- :: retracTG
    G |- Unbox A (Box A t) ~> t : A

    G |- t : S
    ---------------------------------- :: retracTSG
    G |- Split S (Squash S t) ~> t : S

    G |- t : U
    ---------------------------------- :: retractU
    G |- split U (squash U t) ~> t : U

    G |- t1 ~> t2 : U
    --------------------------------- :: split
    G |- split U t1 ~> split U t2 : U

    G |- t ~> t' : Nat
    ---------------------------- :: succ
    G |- succ t ~> succ t' : Nat

    G |- t1 : A && G, x : Nat |- t2 : A
    ------------------------------------------------ :: case0
    G |- case 0 of 0 -> t1, (succ x) -> t2 ~> t1 : A

    G |- t : Nat    
    G |- t1 : A && G, x : Nat |- t2 : A
    ------------------------------------------------------------ :: caseSucc
    G |- case (succ t) of 0 -> t1, (succ x) -> t2 ~> [t/x]t2 : A    

    G |- t ~> t' : Nat    
    G |- t1 : A && G, x : Nat |- t2 : A
    -------------------------------------------------------------------------------- :: case
    G |- case t of 0 -> t1, (succ x) -> t2 ~> case t' of 0 -> t1, (succ x) -> t2 : A

    G, x : A1 |- t1 : A2 && G |- t2 : A1    
    ------------------------------------ :: beta
    G |- (\x:A1.t1) t2 ~> [t2/x]t2 : A2

    G |- t1 : A1 && G |- t2 : A2
    ---------------------------- :: proj1
    G |- fst (t1, t2) ~> t1 : A1

    G |- t1 : A1 && G |- t2 : A2
    ---------------------------- :: proj2
    G |- snd (t1, t2) ~> t2 : A2

    G |- t1 ~> t'1 : A1 -> A2 && G |- t2 : A1
    ----------------------------------------- :: app1
    G |- t1 t2 ~> t'1 t2 : A2

    G |- v : A1 -> A2 && G |- t ~> t' : A1
    -------------------------------------- :: app2
    G |- v t ~> v t' : A2

    G |- t ~> t' : A1 x A2
    ------------------------- :: fst
    G |- fst t ~> fst t' : A1

    G |- t ~> t' : A1 x A2
    ------------------------- :: snd
    G |- snd t ~> snd t' : A2

    G |- t1 ~> t'1 : A1 && G |- t2 : A2
    ----------------------------------- :: pair1
    G |- (t1,t2) ~> (t'1,t2) : A1 x A2

    G |- t1 : A1 && G |- t2  ~> t'2 : A2
    ------------------------------------ :: pair2
    G |- (t1,t2) ~> (t1,t'2) : A1 x A2